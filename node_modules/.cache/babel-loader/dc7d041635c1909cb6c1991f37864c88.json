{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js\";\nimport Header from './Header';\nimport Instruction from './Instruction';\nimport Question from './Question';\nimport React from 'react';\nimport axios from 'axios'; //import './App.css';\n//path must be changed accordingly to the param query input\n\nimport XMLData from './xml/mc.xml'; //import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './style.css'\n\n/*\nPROBLEM:\n  Question class must be the one who check answer\n  => Button must evaluate the question class\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.goToNextQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum + 1\n      });\n    };\n\n    this.goToPrevQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum - 1\n      });\n    };\n\n    this.setCorrect = () => {\n      this.setState({\n        correct: true\n      });\n    };\n\n    this.setSelectedAnswer = answer => {\n      this.setState({\n        selectedAnswer: answer\n      });\n    };\n\n    this.state = {\n      isFetched: false,\n      //isFetched is reset everytime a new component is updated\n      questionNum: -1,\n      questionTexts: [],\n      answers: [],\n      selectedAnswer: \"\",\n      correct: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsWithAxios();\n  }\n\n  fetchQuestionsWithAxios() {\n    axios.get(XMLData, {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      console.log(\"mounting APP\");\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questionTexts = Array.from(xml.getElementsByTagName(\"questiontext\"));\n      var answers = Array.from(xml.getElementsByTagName(\"answer\"));\n      this.setState({\n        questionTexts: questionTexts,\n        answers: answers,\n        isFetched: true\n      });\n    }).catch(e => {\n      console.log(e);\n      this.setState({\n        isFetched: false\n      });\n    });\n  }\n\n  render() {\n    //console.log( this.state )\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Instruction, {\n        questionNum: this.state.questionNum,\n        goToNextQuestion: this.goToNextQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: this.state.questionNum,\n        questionTexts: this.state.questionTexts,\n        answers: this.state.answers,\n        isFetched: this.state.isFetched,\n        choices: this.state.answers.filter((_, index) => {\n          return this.state.questionNum * 4 <= index && index <= this.state.questionNum * 4 + 3;\n        }),\n        goToNextQuestion: this.goToNextQuestion,\n        goToPrevQuestion: this.goToPrevQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js"],"names":["Header","Instruction","Question","React","axios","XMLData","App","Component","constructor","props","goToNextQuestion","setState","questionNum","state","goToPrevQuestion","setCorrect","correct","setSelectedAnswer","answer","selectedAnswer","isFetched","questionTexts","answers","componentDidMount","fetchQuestionsWithAxios","get","then","response","console","log","parser","DOMParser","xml","parseFromString","data","Array","from","getElementsByTagName","catch","e","render","filter","_","index"],"mappings":"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","sourcesContent":["import Header from './Header'\nimport Instruction from './Instruction'\nimport Question from './Question'\nimport React from 'react'\nimport axios from 'axios'\n\n//import './App.css';\n//path must be changed accordingly to the param query input\n\nimport XMLData from './xml/mc.xml'\n//import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './style.css'\n\n/*\nPROBLEM:\n  Question class must be the one who check answer\n  => Button must evaluate the question class\n*/\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      isFetched: false, //isFetched is reset everytime a new component is updated\n      questionNum: -1,\n      questionTexts: [],\n      answers: [],\n      selectedAnswer: \"\",\n      correct: false\n    }\n  }\n\n  goToNextQuestion = () => { this.setState({\n      questionNum : this.state.questionNum + 1\n    })\n  }\n\n  goToPrevQuestion = () => { this.setState({\n      questionNum : this.state.questionNum - 1\n    })\n  }\n\n  setCorrect = () => { this.setState({\n      correct: true\n    })\n  }\n\n  setSelectedAnswer = (answer) => { this.setState({\n      selectedAnswer: answer\n    })\n  }\n\n  componentDidMount(){\n    this.fetchQuestionsWithAxios()\n  }\n\n  fetchQuestionsWithAxios(){\n    axios.get(XMLData,\n      {\"Content-Type\":\"application/xml; charset=utf-8\"\n    }).then((response)=>{\n\n      console.log( \"mounting APP\")\n      const parser = new DOMParser()\n      var xml = parser.parseFromString(response.data,\"text/xml\")\n      var questionTexts = Array.from(xml.getElementsByTagName(\"questiontext\"))\n      var answers = Array.from(xml.getElementsByTagName(\"answer\"))\n\n      this.setState({\n          questionTexts: questionTexts,\n          answers: answers,\n          isFetched:true\n      })\n    }).catch( e => {\n      console.log(e)\n      this.setState({ isFetched: false })\n    })\n  }\n\n  render(){\n    //console.log( this.state )\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Instruction\n          questionNum={this.state.questionNum}\n          goToNextQuestion={this.goToNextQuestion}/>\n        <Question\n          questionNum={this.state.questionNum}\n          questionTexts={this.state.questionTexts}\n          answers={this.state.answers}\n          isFetched={this.state.isFetched}\n          choices = {this.state.answers.filter( (_ , index) => {\n            return ((this.state.questionNum*4 <= index) && (index <= this.state.questionNum*4 + 3))\n          })}\n          goToNextQuestion={this.goToNextQuestion}\n          goToPrevQuestion={this.goToPrevQuestion}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}