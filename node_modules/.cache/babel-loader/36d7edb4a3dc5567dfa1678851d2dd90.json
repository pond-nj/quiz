{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js\";\nimport Header from './Header';\nimport Instruction from './Instruction';\nimport Question from './Question';\nimport React from 'react';\nimport axios from 'axios';\nimport XMLData from './xml/mc.xml';\nimport './mcstyle.css';\nimport PageManager from './PageManager';\n/*\nNeed Updates:\n  Cannot click choice yet if reply button has not been pressed\n\n  Have to implement Last page after complete all questions\n  //review correct answer => display all correct answer\n\n  Additional features\n    1. Transition from feedback block:none to block:display\n    2. hide feedback (correct/ uncorrect) in chrome dev tools\n    3. (For self entertainment) Save individual's score to database\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setSubmit = state => {\n      this.setState({\n        pressSubmit: state\n      });\n    };\n\n    this.setStartReview = state => {\n      this.setState({\n        startReview: state\n      });\n    };\n\n    this.resetSelected = () => {\n      this.setState({\n        correct: null,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.goToNextQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum + 1,\n        correct: null,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.goToPrevQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum - 1,\n        correct: null,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.setCorrect = state => {\n      this.setState({\n        correct: state\n      });\n    };\n\n    this.setSelectedAnswer = answer => {\n      this.setState({\n        selectedAnswer: answer,\n        pressSubmit: 0\n      });\n    };\n\n    this.state = {\n      questionsList: [],\n      questionNum: -1,\n      //0 to total no. of question-1, 0 is the first question\n      answersList: [],\n      selectedAnswer: -1,\n      correct: null,\n      pressSubmit: 0,\n      // = 1 when submit button is press, use to show message when press submit but no answer is selected\n      startReview: -1 // = 1 when all questions are answered\n\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsWithAxios();\n  }\n\n  fetchQuestionsWithAxios() {\n    axios.get(XMLData, {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      console.log(response.data);\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questionsList = Array.from(xml.getElementsByTagName(\"question\"));\n      console.log(questionsList[3].getElementsByTagName(\"questiontext\")[0].childNodes[0].textContent); //shuffle elements in an array\n\n      const shuffle = array => {\n        var currentIndex = array.length,\n            randomIndex; // While there remain elements to shuffle...\n\n        while (currentIndex != 0) {\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--; // And swap it with the current element.\n\n          [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n      };\n\n      var answersList = [];\n\n      for (var i = 0; i < questionsList.length; i++) {\n        var answers = Array.from(questionsList[i].getElementsByTagName(\"answer\"));\n\n        if (questionsList[i].getAttribute(\"randomanswer\").localeCompare(\"true\") == 0) {\n          shuffle(answers);\n        } // console.log( answers )\n\n\n        answersList.push(answers);\n      }\n\n      this.setState({\n        questionsList: questionsList,\n        answersList: answersList\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"wrapper\",\n        \"data-role\": \"content\",\n        children: /*#__PURE__*/_jsxDEV(PageManager, {\n          questionNum: this.state.questionNum,\n          questionsList: this.state.questionsList,\n          choices: this.state.answersList[this.state.questionNum],\n          totalQuestions: this.state.answersList.length,\n          selectedAnswer: this.state.selectedAnswer,\n          correct: this.state.correct,\n          pressSubmit: this.state.pressSubmit,\n          startReview: this.state.startReview,\n          goToNextQuestion: this.goToNextQuestion,\n          goToPrevQuestion: this.goToPrevQuestion,\n          setSelectedAnswer: this.setSelectedAnswer,\n          setCorrect: this.setCorrect,\n          setSubmit: this.setSubmit,\n          resetSelected: this.resetSelected,\n          setStartReview: this.setStartReview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js"],"names":["Header","Instruction","Question","React","axios","XMLData","PageManager","App","Component","constructor","props","setSubmit","state","setState","pressSubmit","setStartReview","startReview","resetSelected","correct","selectedAnswer","goToNextQuestion","questionNum","goToPrevQuestion","setCorrect","setSelectedAnswer","answer","questionsList","answersList","componentDidMount","fetchQuestionsWithAxios","get","then","response","console","log","data","parser","DOMParser","xml","parseFromString","Array","from","getElementsByTagName","childNodes","textContent","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","i","answers","getAttribute","localeCompare","push","catch","e","render"],"mappings":"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","sourcesContent":["import Header from './Header'\nimport Instruction from './Instruction'\nimport Question from './Question'\nimport React from 'react'\nimport axios from 'axios'\n\nimport XMLData from './xml/mc.xml'\nimport './mcstyle.css'\nimport PageManager from './PageManager'\n\n/*\nNeed Updates:\n  Cannot click choice yet if reply button has not been pressed\n\n  Have to implement Last page after complete all questions\n  //review correct answer => display all correct answer\n\n  Additional features\n    1. Transition from feedback block:none to block:display\n    2. hide feedback (correct/ uncorrect) in chrome dev tools\n    3. (For self entertainment) Save individual's score to database\n*/\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      questionsList: [],\n      questionNum: -1, //0 to total no. of question-1, 0 is the first question\n      answersList: [],\n      selectedAnswer: -1,\n      correct: null,\n      pressSubmit: 0, // = 1 when submit button is press, use to show message when press submit but no answer is selected\n      startReview: -1 // = 1 when all questions are answered\n    }\n  }\n\n  setSubmit = (state) => { this.setState({\n      pressSubmit: state\n    })\n  }\n\n  setStartReview = (state) => { this.setState({\n    startReview: state\n    })\n  }\n\n  resetSelected = () => { this.setState({\n      correct: null,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  goToNextQuestion = () => { this.setState({\n      questionNum : this.state.questionNum + 1,\n      correct: null,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  goToPrevQuestion = () => { this.setState({\n      questionNum : this.state.questionNum - 1, \n      correct: null,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  setCorrect = (state) => { this.setState({\n      correct: state })\n  }\n\n  setSelectedAnswer = (answer) => { this.setState({\n      selectedAnswer: answer,\n      pressSubmit: 0\n     })\n  }\n\n  componentDidMount(){\n    this.fetchQuestionsWithAxios()\n  }\n\n  fetchQuestionsWithAxios(){\n\n    axios.get(XMLData,\n      {\"Content-Type\":\"application/xml; charset=utf-8\"\n    }).then((response)=>{\n      console.log(response.data)\n      const parser = new DOMParser()\n      var xml = parser.parseFromString(response.data,\"text/xml\")\n    \n      var questionsList = Array.from(xml.getElementsByTagName(\"question\"))\n      console.log(questionsList[3].getElementsByTagName(\"questiontext\")[0].childNodes[0].textContent)\n\n      //shuffle elements in an array\n      const shuffle = (array) => {\n        var currentIndex = array.length,  randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (currentIndex != 0) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n      \n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n        return array;\n      }\n\n      var answersList = []\n      for( var i = 0 ; i < questionsList.length ; i++ ){\n        var answers = Array.from( questionsList[i].getElementsByTagName(\"answer\") )\n        if( questionsList[i].getAttribute(\"randomanswer\").localeCompare(\"true\") == 0 ){\n          shuffle( answers )\n        }\n        // console.log( answers )\n        answersList.push( answers )\n      }\n\n      this.setState({\n          questionsList: questionsList,\n          answersList: answersList,\n      })\n    }).catch( e => {\n      console.log(e)\n    })\n  }\n\n  render(){\n\n    return (\n      <div className=\"App\">\n        <Header/>\n        <div id =\"wrapper\" data-role=\"content\">\n          <PageManager\n            questionNum={this.state.questionNum}\n            questionsList={this.state.questionsList}\n            choices = {this.state.answersList[this.state.questionNum]}\n            totalQuestions={this.state.answersList.length}\n            selectedAnswer={this.state.selectedAnswer}\n            correct={this.state.correct}\n            pressSubmit={this.state.pressSubmit}\n            startReview={this.state.startReview}\n\n            goToNextQuestion={this.goToNextQuestion}\n            goToPrevQuestion={this.goToPrevQuestion}\n            setSelectedAnswer={this.setSelectedAnswer}\n            setCorrect={this.setCorrect}\n            setSubmit={this.setSubmit}\n            resetSelected={this.resetSelected}\n            setStartReview={this.setStartReview}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}