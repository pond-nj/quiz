{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\";\nimport React, { useState } from \"react\";\nimport Buttons from \"./Buttons\"; //contain question text\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionText = _ref => {\n  let {\n    props\n  } = _ref;\n\n  if (props.questionNum != -1) {\n    //-1 is start menu\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-number\",\n        children: [\"Question \", props.questionNum + 1, \" out of 5\", props.Question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }, this), console.log(props.questions[props.questionNum].childNodes[1]), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question\",\n        children: props.questions[props.questionNum].childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n    /*\n    return (props.isFetched) ? (\n        <>\n            <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n            <p className=\"question\">{props.questions[props.questionNum].childNodes[1].textContent}</p>\n        </>\n    ) : (<p>Still Loading..</p>)  */\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}; //display choices\n\n\n_c = QuestionText;\n\nconst ChoiceList = _ref2 => {\n  let {\n    props\n  } = _ref2;\n  //console.log(props)\n  const ChoicesJSX = props.choices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"answer-\" + props.questionNum,\n        index: index,\n        id: \"answer-\" + index,\n        value: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"answer-\" + index,\n        className: \"hovereffect\",\n        children: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feedback\",\n        id: \"feedback-\" + index,\n        style: {\n          display: props.selectedAnswer == index && props.correct != null ? \"block\" : \"none\"\n        },\n        children: choice.childNodes[3].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mc cf\",\n    onChange: event => {\n      props.setCorrect(null);\n      props.setSelectedAnswer(event.target.getAttribute(\"index\"));\n    },\n    children: ChoicesJSX\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = ChoiceList;\n\nconst Choices = _ref3 => {\n  let {\n    props\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(ChoiceList, {\n    props: props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 13\n  }, this);\n};\n\n_c3 = Choices;\n\nconst Question = props => {\n  //console.log( props )\n  if (props.questionNum != -1) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"question cf\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"instruction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ChoiceList, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Buttons\n      /* we don't have to assign every props again \n      like using props={...props, new element}\n      I have tried and it did not work\n      seem there is some syntax bug*/\n      , {\n        goToNextQuestion: props.goToNextQuestion,\n        goToPrevQuestion: props.goToPrevQuestion,\n        correctAnswer: props.choices.map((choice, _) => {\n          return choice.getAttribute(\"fraction\") == 1;\n        }).indexOf(true),\n        setCorrect: props.setCorrect,\n        selectedAnswer: props.selectedAnswer,\n        correct: props.correct\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c4 = Question;\nexport default Question;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"QuestionText\");\n$RefreshReg$(_c2, \"ChoiceList\");\n$RefreshReg$(_c3, \"Choices\");\n$RefreshReg$(_c4, \"Question\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","useState","Buttons","QuestionText","props","questionNum","Question","console","log","questions","childNodes","textContent","ChoiceList","ChoicesJSX","choices","map","choice","index","display","selectedAnswer","correct","event","setCorrect","setSelectedAnswer","target","getAttribute","Choices","goToNextQuestion","goToPrevQuestion","_","indexOf"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Buttons from \"./Buttons\"\n\n//contain question text\nconst QuestionText = ({props}) => {\n    if( props.questionNum != -1 ){ //-1 is start menu\n        return (<>\n            <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n            {console.log(props.questions[props.questionNum].childNodes[1])}\n            <p className=\"question\">{props.questions[props.questionNum].childNodes[1].textContent}</p>\n        </>)\n        \n        /*\n        return (props.isFetched) ? (\n            <>\n                <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n                <p className=\"question\">{props.questions[props.questionNum].childNodes[1].textContent}</p>\n            </>\n        ) : (<p>Still Loading..</p>)  */\n\n    } else { return <></> }\n}\n\n\n//display choices\nconst ChoiceList = ({props}) => {\n    //console.log(props)\n\n    const ChoicesJSX = props.choices.map( (choice, index) => {\n        return(\n            <>\n                <input\n                    type=\"radio\"\n                    name={\"answer-\"+props.questionNum}\n                    index={index}\n                    id={\"answer-\"+index}\n                    value={choice.childNodes[1].textContent}/>\n                <label\n                    htmlFor={\"answer-\"+index}\n                    className=\"hovereffect\">\n                {choice.childNodes[1].textContent}\n                </label>\n                <p\n                    className=\"feedback\"\n                    id={\"feedback-\"+index}\n                    style={{display: ( (props.selectedAnswer == index) && (props.correct != null )) ? \"block\" : \"none\"}}>\n                {/* HOW TO CHANGE STYLE FROM NONE TO BLOCK */}\n                {choice.childNodes[3].textContent}\n                </p>\n            </>)\n    })\n\n    return(\n        <form className=\"mc cf\" onChange={(event) => {\n            props.setCorrect(null)\n            props.setSelectedAnswer(event.target.getAttribute(\"index\"))}\n            }>\n        {ChoicesJSX}\n        </form>\n    )\n}\n\nconst Choices = ({props}) => {\n    return( <ChoiceList props={props}/> )\n}\n\nconst Question = (props) => {\n    //console.log( props )\n    if( props.questionNum != -1){\n    return(<>\n        <section className=\"question cf\">\n            <p className=\"instruction\"></p>\n            <QuestionText props={props} />\n            <ChoiceList props={props}/>\n            <p className=\"messages\"></p>\n        </section>\n\n        <Buttons\n\n            /* we don't have to assign every props again \n            like using props={...props, new element}\n            I have tried and it did not work\n            seem there is some syntax bug*/\n            goToNextQuestion={props.goToNextQuestion}\n            goToPrevQuestion={props.goToPrevQuestion}\n            correctAnswer={props.choices.map( ( choice, _ ) => {\n                return( choice.getAttribute(\"fraction\") == 1 )\n            }).indexOf(true)}\n            setCorrect={props.setCorrect}\n            selectedAnswer={props.selectedAnswer}\n            correct={props.correct}\n          />\n    </>)\n    } else {\n        return(<></>)\n    }\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}