{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js\";\nimport logo from './logo.svg';\nimport Header from './Header';\nimport Wrapper from './Wrapper';\nimport Question from './Question';\nimport Footer from './Footer';\nimport React from 'react';\nimport axios from 'axios';\nimport './App.css'; //path must be changed accordingly to the param query input\n\nimport XMLData from './xml/mc.xml'; //import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './css/style.css'\n\n/*\nPROBLEM:\n  WHEN DO WE RESET QUESTION NUM => WHEN THE BUTTON IS PRESSED\n  HOW DO WE SEND DATA FROM CHILD TO PARENTS IN REACT?\n\n  SEND DATA FROM CHILD TO PARENT == SEND A FUNCTION FROM PARENT TO CHILD FOR A CHILD TO RUN AND RETURN \n\n  LOOK FOR FORM.JS in name-job\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionNum: 0,\n      questionTexts: [],\n      answers: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(XMLData, {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      //there is no need to parse this everytime there is a mount,\n      //only need to parse it when the page is loaded\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questionTexts = xml.getElementsByTagName(\"questiontext\");\n      var answers = xml.getElementsByTagName(\"answer\"); //.innerHTML <= should I use innerHTML??\n      //should I change parse xml as a string or as an JSX object?\n      //var answers = xml.getElementsByTagName(\"\")\n      //do we have to set every state again??\n\n      this.setState({\n        questionNum: this.state.questionNum,\n        questionTexts: questionTexts,\n        answers: answers\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: this.state.questionNum,\n        questionTexts: this.state.questionTexts,\n        answers: this.state.answers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js"],"names":["logo","Header","Wrapper","Question","Footer","React","axios","XMLData","App","Component","state","questionNum","questionTexts","answers","componentDidMount","get","then","response","parser","DOMParser","xml","parseFromString","data","getElementsByTagName","setState","render"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP,C,CACA;;AAEA,OAAOC,OAAP,MAAoB,cAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACNC,MAAAA,WAAW,EAAE,CADP;AAENC,MAAAA,aAAa,EAAC,EAFR;AAGNC,MAAAA,OAAO,EAAC;AAHF,KAFwB;AAAA;;AAQhCC,EAAAA,iBAAiB,GAAE;AACjBR,IAAAA,KAAK,CAACS,GAAN,CAAUR,OAAV,EACI;AAAC,sBAAe;AAAhB,KADJ,EAEGS,IAFH,CAESC,QAAD,IAAY;AAChB;AACA;AACA,YAAMC,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,UAAIC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBJ,QAAQ,CAACK,IAAhC,EAAqC,UAArC,CAAV;AACA,UAAIV,aAAa,GAAGQ,GAAG,CAACG,oBAAJ,CAAyB,cAAzB,CAApB;AACA,UAAIV,OAAO,GAAGO,GAAG,CAACG,oBAAJ,CAAyB,QAAzB,CAAd,CANgB,CAQhB;AACA;AACA;AAEA;;AACA,WAAKC,QAAL,CAAc;AACVb,QAAAA,WAAW,EAAE,KAAKD,KAAL,CAAWC,WADd;AAEVC,QAAAA,aAAa,EAAEA,aAFL;AAGVC,QAAAA,OAAO,EAAEA;AAHC,OAAd;AAKH,KApBD;AAqBH;;AAECY,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,QAAD;AACE,QAAA,WAAW,EAAE,KAAKf,KAAL,CAAWC,WAD1B;AAEE,QAAA,aAAa,EAAE,KAAKD,KAAL,CAAWE,aAF5B;AAGE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG;AAHtB;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA7C+B;;AAgDlC,eAAeL,GAAf","sourcesContent":["import logo from './logo.svg'\n\nimport Header from './Header'\nimport Wrapper from './Wrapper'\nimport Question from './Question';\nimport Footer from './Footer';\n\nimport React from 'react';\nimport axios from 'axios'\n\nimport './App.css';\n//path must be changed accordingly to the param query input\n\nimport XMLData from './xml/mc.xml'\n//import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './css/style.css'\n\n/*\nPROBLEM:\n  WHEN DO WE RESET QUESTION NUM => WHEN THE BUTTON IS PRESSED\n  HOW DO WE SEND DATA FROM CHILD TO PARENTS IN REACT?\n\n  SEND DATA FROM CHILD TO PARENT == SEND A FUNCTION FROM PARENT TO CHILD FOR A CHILD TO RUN AND RETURN \n\n  LOOK FOR FORM.JS in name-job\n*/\n\nclass App extends React.Component {\n\n  state = {\n    questionNum: 0,\n    questionTexts:[],\n    answers:[]\n}\n\n  componentDidMount(){\n    axios.get(XMLData,\n        {\"Content-Type\":\"application/xml; charset=utf-8\"\n    }).then((response)=>{\n        //there is no need to parse this everytime there is a mount,\n        //only need to parse it when the page is loaded\n        const parser = new DOMParser()\n        var xml = parser.parseFromString(response.data,\"text/xml\")\n        var questionTexts = xml.getElementsByTagName(\"questiontext\")\n        var answers = xml.getElementsByTagName(\"answer\")\n        \n        //.innerHTML <= should I use innerHTML??\n        //should I change parse xml as a string or as an JSX object?\n        //var answers = xml.getElementsByTagName(\"\")\n\n        //do we have to set every state again??\n        this.setState({\n            questionNum: this.state.questionNum,\n            questionTexts: questionTexts,\n            answers: answers\n        })\n    })\n}\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Wrapper/>\n        <Question\n          questionNum={this.state.questionNum}\n          questionTexts={this.state.questionTexts}\n          answers={this.state.answers}\n          />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}