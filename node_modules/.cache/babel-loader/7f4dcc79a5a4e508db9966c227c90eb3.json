{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Buttons from \"./Buttons\"; //contain question text\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionText = _ref => {\n  let {\n    props\n  } = _ref;\n\n  if (props.questionNum != -1) {\n    //-1 is start menu\n    return props.isFetched ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-number\",\n        children: [\"Question \", props.questionNum + 1, \" out of 5\", props.Question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question\",\n        children: props.questionTexts[props.questionNum].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Still Loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}; //display choices\n\n\n_c = QuestionText;\n\nconst ChoiceList = _ref2 => {\n  let {\n    props\n  } = _ref2;\n  console.log(props);\n  const ChoicesJSX = props.choices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"answer-\" + props.questionNum,\n        id: \"answer-\" + index,\n        value: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"answer-\" + index,\n        className: \"hovereffect\",\n        children: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feedback\",\n        id: \"feedback-\" + index,\n        style: {\n          display: \"block\"\n        },\n        children: \"Feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mc cf\",\n    onChange: event => {\n      props.setSelectedAnswer(event.target.id);\n    },\n    children: ChoicesJSX\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = ChoiceList;\n\nconst Choices = _ref3 => {\n  let {\n    props\n  } = _ref3;\n  console.log(props);\n\n  if (props.questionNum != -1) {\n    //-1 is start menu\n    return /*#__PURE__*/_jsxDEV(ChoiceList, {\n      props: props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c3 = Choices;\n\nconst Question = props => {\n  _s();\n\n  const [correctAnswer, setCorrectAnswer] = useState();\n  const [choices, setChoices] = useState();\n  const [selectedAnswer, setSelectedAnswer] = useState();\n  const [correct, setCorrect] = useState();\n  setChoices(props.answers.filter((_, index) => {\n    return props.questionNum * 4 <= index && index <= props.questionNum * 4 + 3;\n  }));\n  choices.forEach((choice, index) => {\n    if (choice.getAttribute(\"fraction\") == 1) {\n      setCorrectAnswer(\"answer-\" + index);\n    }\n  });\n\n  const checkAnswer = () => {\n    /* need update */\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"question cf\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instruction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n        props: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Choices, {\n        props: { ...props,\n          setSelectedAnswer: setSelectedAnswer,\n          setCorrectAnswer: setCorrectAnswer,\n          choices: choices\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      goToNextQuestion: props.goToNextQuestion,\n      goToPrevQuestion: props.goToPrevQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Question, \"yuDZKyq6hqTYIlcgNv/pM7++JmM=\");\n\n_c4 = Question;\nexport default Question;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"QuestionText\");\n$RefreshReg$(_c2, \"ChoiceList\");\n$RefreshReg$(_c3, \"Choices\");\n$RefreshReg$(_c4, \"Question\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","useState","Buttons","QuestionText","props","questionNum","isFetched","Question","questionTexts","textContent","ChoiceList","console","log","ChoicesJSX","choices","map","choice","index","childNodes","display","event","setSelectedAnswer","target","id","Choices","correctAnswer","setCorrectAnswer","setChoices","selectedAnswer","correct","setCorrect","answers","filter","_","forEach","getAttribute","checkAnswer","goToNextQuestion","goToPrevQuestion"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Buttons from \"./Buttons\"\n\n//contain question text\nconst QuestionText = ({props}) => {\n    if( props.questionNum != -1 ){ //-1 is start menu\n        return (props.isFetched) ? (\n            <>\n                <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n                <p className=\"question\">{props.questionTexts[props.questionNum].textContent}</p> {/* THERE IS A PROBLEM AT THIS STAGE*/}\n            </>\n        ) : (<p>Still Loading..</p>)\n    } else { return <></> }\n}\n\n\n//display choices\nconst ChoiceList = ({props}) => {\n    console.log(props)\n\n    const ChoicesJSX = props.choices.map( (choice, index) => {\n        return(\n            <>\n                <input\n                    type=\"radio\"\n                    name={\"answer-\"+props.questionNum}\n                    id={\"answer-\"+index}\n                    value={choice.childNodes[1].textContent}/>\n                <label\n                    htmlFor={\"answer-\"+index}\n                    className=\"hovereffect\">\n                {choice.childNodes[1].textContent}</label>\n                <p\n                    className=\"feedback\"\n                    id={\"feedback-\"+index}\n                    style={{display:\"block\"}}>\n                Feedback\n                </p>\n            </>)\n    })\n\n\n    return(\n        <form className=\"mc cf\" onChange={(event) => {\n            props.setSelectedAnswer(event.target.id)}\n            }>\n        {ChoicesJSX}\n        </form>\n    )\n}\n\nconst Choices = ({props}) => {\n    console.log(props)\n\n    if( props.questionNum != -1 ){ //-1 is start menu\n        return(\n            <ChoiceList props={props}/>\n            )\n    }else return <></> \n}\n\nconst Question = (props) => {\n    const [correctAnswer, setCorrectAnswer] = useState( /* need update */)\n    const [choices, setChoices] = useState(/*need update*/)\n    const [selectedAnswer, setSelectedAnswer] = useState(/*need update*/)\n    const [correct, setCorrect] = useState(/*need update*/)\n\n    setChoices(props.answers.filter( (_ , index) => {\n        return ((props.questionNum*4 <= index) && (index <= props.questionNum*4 + 3))\n    }))\n\n    choices.forEach( (choice,index) => {\n        if( choice.getAttribute(\"fraction\") == 1 ){\n            setCorrectAnswer( \"answer-\"+index )\n        }  \n    })\n    \n    const checkAnswer = () => {\n        /* need update */\n    }\n    \n    return(<>\n        <section className=\"question cf\">\n            <p className=\"instruction\"></p>\n            <QuestionText props={props} />\n            <Choices\n                props={{...props,\n                    setSelectedAnswer: setSelectedAnswer,\n                    setCorrectAnswer: setCorrectAnswer,\n                    choices: choices\n                }}\n            />\n            <p className=\"messages\"></p>\n        </section>\n\n        {/* console.log(props) */}\n        <Buttons\n          goToNextQuestion={props.goToNextQuestion}\n          goToPrevQuestion={props.goToPrevQuestion} />\n          {/*checkAnswer={checkAnswer}*/}\n    </>)\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}