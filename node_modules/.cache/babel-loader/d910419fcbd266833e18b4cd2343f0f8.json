{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js\";\nimport logo from './logo.svg';\nimport Header from './Header';\nimport Wrapper from './Wrapper';\nimport Question from './Question';\nimport Footer from './Footer';\nimport React from 'react';\nimport './App.css';\nimport XMLData from './xml/mc.xml'; //import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './css/style.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionText: \"\",\n      questionNum: this.props.questionNum,\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\",\n      answer4: \"\"\n    };\n  }\n\n  componentDidMount() {\n    const questionNum = this.state.questionNum;\n    axios.get(XMLData, {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      //there is no need to parse this everytime there is a mount,\n      //only need to parse it when the page is loaded\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var question = xml.getElementsByTagName(\"questiontext\")[questionNum];\n      var answers = xml.getElementsByTagName(\"answer\"); //var an = answers.slice(questionNum, questionNum+4)\n      //console.log( an )\n      //.innerHTML <= should I use innerHTML??\n      //should I change parse xml as a string or as an JSX object?\n      //var answers = xml.getElementsByTagName(\"\")\n      //do we have to set every state again??\n\n      this.setState({\n        questionText: question.childNodes[0].nodeValue,\n        questionNum: questionNum,\n        answer1: answers[questionNum * 4].childNodes[1].textContent,\n        answer2: answers[questionNum * 4 + 1].childNodes[1].textContent,\n        answer3: answers[questionNum * 4 + 2].childNodes[1].textContent,\n        answer4: answers[questionNum * 4 + 3].childNodes[1].textContent\n      });\n      console.log(this.state.questionText);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: this.state.questionNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js"],"names":["logo","Header","Wrapper","Question","Footer","React","XMLData","App","Component","state","questionText","questionNum","props","answer1","answer2","answer3","answer4","componentDidMount","axios","get","then","response","parser","DOMParser","xml","parseFromString","data","question","getElementsByTagName","answers","setState","childNodes","nodeValue","textContent","console","log","render"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,cAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACNC,MAAAA,YAAY,EAAE,EADR;AAENC,MAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWD,WAFlB;AAGNE,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,OAAO,EAAE,EAJH;AAKNC,MAAAA,OAAO,EAAE,EALH;AAMNC,MAAAA,OAAO,EAAE;AANH,KAFwB;AAAA;;AAWhCC,EAAAA,iBAAiB,GAAE;AACjB,UAAMN,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA/B;AACAO,IAAAA,KAAK,CAACC,GAAN,CAAUb,OAAV,EACI;AAAC,sBAAe;AAAhB,KADJ,EAEGc,IAFH,CAESC,QAAD,IAAY;AAChB;AACA;AACA,YAAMC,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,UAAIC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBJ,QAAQ,CAACK,IAAhC,EAAqC,UAArC,CAAV;AACA,UAAIC,QAAQ,GAAGH,GAAG,CAACI,oBAAJ,CAAyB,cAAzB,EAAyCjB,WAAzC,CAAf;AACA,UAAIkB,OAAO,GAAGL,GAAG,CAACI,oBAAJ,CAAyB,QAAzB,CAAd,CANgB,CAOhB;AACA;AACA;AACA;AACA;AAEA;;AACA,WAAKE,QAAL,CAAc;AACVpB,QAAAA,YAAY,EAAEiB,QAAQ,CAACI,UAAT,CAAoB,CAApB,EAAuBC,SAD3B;AAEVrB,QAAAA,WAAW,EAAEA,WAFH;AAGVE,QAAAA,OAAO,EAAEgB,OAAO,CAAClB,WAAW,GAAC,CAAb,CAAP,CAAuBoB,UAAvB,CAAkC,CAAlC,EAAqCE,WAHpC;AAIVnB,QAAAA,OAAO,EAAEe,OAAO,CAAClB,WAAW,GAAC,CAAZ,GAAe,CAAhB,CAAP,CAA0BoB,UAA1B,CAAqC,CAArC,EAAwCE,WAJvC;AAKVlB,QAAAA,OAAO,EAAEc,OAAO,CAAClB,WAAW,GAAC,CAAZ,GAAe,CAAhB,CAAP,CAA0BoB,UAA1B,CAAqC,CAArC,EAAwCE,WALvC;AAMVjB,QAAAA,OAAO,EAAEa,OAAO,CAAClB,WAAW,GAAC,CAAZ,GAAe,CAAhB,CAAP,CAA0BoB,UAA1B,CAAqC,CAArC,EAAwCE;AANvC,OAAd;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK1B,KAAL,CAAWC,YAAvB;AAEH,KA1BD;AA2BH;;AAEC0B,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,QAAD;AAAU,QAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWE;AAAlC;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAnD+B;;AAsDlC,eAAeJ,GAAf","sourcesContent":["import logo from './logo.svg'\n\nimport Header from './Header'\nimport Wrapper from './Wrapper'\nimport Question from './Question';\nimport Footer from './Footer';\n\nimport React from 'react';\n\nimport './App.css';\nimport XMLData from './xml/mc.xml'\n//import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './css/style.css'\n\nclass App extends React.Component {\n\n  state = {\n    questionText: \"\",\n    questionNum: this.props.questionNum,\n    answer1: \"\",\n    answer2: \"\",\n    answer3: \"\",\n    answer4: \"\"\n}\n\n  componentDidMount(){\n    const questionNum = this.state.questionNum\n    axios.get(XMLData,\n        {\"Content-Type\":\"application/xml; charset=utf-8\"\n    }).then((response)=>{\n        //there is no need to parse this everytime there is a mount,\n        //only need to parse it when the page is loaded\n        const parser = new DOMParser()\n        var xml = parser.parseFromString(response.data,\"text/xml\")\n        var question = xml.getElementsByTagName(\"questiontext\")[questionNum]\n        var answers = xml.getElementsByTagName(\"answer\")\n        //var an = answers.slice(questionNum, questionNum+4)\n        //console.log( an )\n        //.innerHTML <= should I use innerHTML??\n        //should I change parse xml as a string or as an JSX object?\n        //var answers = xml.getElementsByTagName(\"\")\n\n        //do we have to set every state again??\n        this.setState({\n            questionText: question.childNodes[0].nodeValue,\n            questionNum: questionNum,\n            answer1: answers[questionNum*4].childNodes[1].textContent,\n            answer2: answers[questionNum*4 +1].childNodes[1].textContent,\n            answer3: answers[questionNum*4 +2].childNodes[1].textContent,\n            answer4: answers[questionNum*4 +3].childNodes[1].textContent\n        })\n        console.log(this.state.questionText)\n\n    })\n}\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Wrapper/>\n        <Question questionNum={this.state.questionNum}/>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}