{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\";\nimport React from \"react\";\n/*\n    quesiton and choice should be updated everytime\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"question cf\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instruction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n        props: this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Choices, {\n        props: this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst QuestionText = _ref => {\n  let {\n    props\n  } = _ref;\n\n  if (props.questionNum != 0) {\n    return props.isFetched ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-number\",\n        children: [\"Question \", props.questionNum, \" out of \", props.Question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question\",\n        children: props.questionTexts[props.questionNum].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Still Loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c = QuestionText;\n\nconst Choices = _ref2 => {\n  let {\n    props\n  } = _ref2;\n  const choices = props.answers.filter((_, index) => {\n    return props.questionNum * 4 <= index && index <= props.questionNum * 4 + 3;\n  });\n\n  if (props.questionNum != 0) {\n    return choices.map((choice, index) => {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"mc cf\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"\",\n          id: \"answer-\" + index,\n          value: choice.childNodes[1].textContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"answer-\" + index,\n          className: \"hovereffect\",\n          children: choice.childNodes[1].textContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"feedback\",\n          id: \"feedback-\" + index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 20\n      }, this);\n    });\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c2 = Choices;\nexport default Question;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionText\");\n$RefreshReg$(_c2, \"Choices\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","Question","Component","constructor","props","render","QuestionText","questionNum","isFetched","questionTexts","textContent","Choices","choices","answers","filter","_","index","map","choice","childNodes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;;;;;AAGA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuC;AAEnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAS,MAAA,SAAS,EAAC,aAAnB;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAE,KAAKD;AAA1B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,OAAD;AAAS,QAAA,KAAK,EAAE,KAAKA;AAArB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAfkC;;AAkBvC,MAAME,YAAY,GAAG,QAAa;AAAA,MAAZ;AAACF,IAAAA;AAAD,GAAY;;AAC9B,MAAIA,KAAK,CAACG,WAAN,IAAqB,CAAzB,EAA4B;AACxB,WAAQH,KAAK,CAACI,SAAP,gBACH;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC,iBAAb;AAAA,gCAAyCJ,KAAK,CAACG,WAA/C,cAAoEH,KAAK,CAACH,QAA1E;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA,kBAAyBG,KAAK,CAACK,aAAN,CAAoBL,KAAK,CAACG,WAA1B,EAAuCG;AAAhE;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADG,gBAKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALL;AAMH,GAPD,MAOO;AACH,wBAAO,qCAAP;AACH;AAEJ,CAZD;;KAAMJ,Y;;AAcN,MAAMK,OAAO,GAAG,SAAa;AAAA,MAAZ;AAACP,IAAAA;AAAD,GAAY;AACzB,QAAMQ,OAAO,GAAGR,KAAK,CAACS,OAAN,CAAcC,MAAd,CAAsB,CAACC,CAAD,EAAKC,KAAL,KAAe;AACjD,WAASZ,KAAK,CAACG,WAAN,GAAkB,CAAlB,IAAuBS,KAAxB,IAAmCA,KAAK,IAAIZ,KAAK,CAACG,WAAN,GAAkB,CAAlB,GAAsB,CAA1E;AACH,GAFe,CAAhB;;AAIA,MAAIH,KAAK,CAACG,WAAN,IAAqB,CAAzB,EAA4B;AACxB,WAAOK,OAAO,CAACK,GAAR,CAAa,CAACC,MAAD,EAASF,KAAT,KAAmB;AACnC,0BAAO;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA,gCACC;AACI,UAAA,IAAI,EAAC,OADT;AAEI,UAAA,IAAI,EAAC,EAFT;AAGI,UAAA,EAAE,EAAE,YAAUA,KAHlB;AAII,UAAA,KAAK,EAAEE,MAAM,CAACC,UAAP,CAAkB,CAAlB,EAAqBT;AAJhC;AAAA;AAAA;AAAA;AAAA,gBADD,eAMC;AACI,UAAA,OAAO,EAAE,YAAUM,KADvB;AAEI,UAAA,SAAS,EAAC,aAFd;AAAA,oBAGCE,MAAM,CAACC,UAAP,CAAkB,CAAlB,EAAqBT;AAHtB;AAAA;AAAA;AAAA;AAAA,gBAND,eAUC;AACI,UAAA,SAAS,EAAC,UADd;AAEI,UAAA,EAAE,EAAE,cAAYM;AAFpB;AAAA;AAAA;AAAA;AAAA,gBAVD;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAeC,KAhBE,CAAP;AAkBH,GAnBD,MAmBK;AACD,wBAAO,qCAAP;AACH;AACJ,CA3BD;;MAAML,O;AA6BN,eAAeV,QAAf","sourcesContent":["import React from \"react\"\n\n/*\n    quesiton and choice should be updated everytime\n*/\n\n\nclass Question extends React.Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    render(){\n        return(\n            <section className=\"question cf\">\n                <p className=\"instruction\"></p>\n                <QuestionText props={this.props} />\n                <Choices props={this.props}/>\n                <p className=\"messages\"></p>\n            </section>\n        )\n    }\n}\n\nconst QuestionText = ({props}) => {\n    if( props.questionNum != 0 ){\n        return (props.isFetched) ? (\n            <>\n                <p className=\"question-number\">Question {props.questionNum} out of {props.Question}</p>\n                <p className=\"question\">{props.questionTexts[props.questionNum].textContent}</p> {/* THERE IS A PROBLEM AT THIS STAGE*/}\n            </>\n        ) : (<p>Still Loading..</p>)\n    } else {\n        return <></>\n    }\n\n}\n\nconst Choices = ({props}) => {\n    const choices = props.answers.filter( (_ , index) => {\n        return ((props.questionNum*4 <= index) && (index <= props.questionNum*4 + 3))\n    })\n\n    if( props.questionNum != 0 ){\n        return(choices.map( (choice, index) => {\n            return(<form className=\"mc cf\">\n                    <input\n                        type=\"radio\"\n                        name=\"\"\n                        id={\"answer-\"+index}\n                        value={choice.childNodes[1].textContent}/>\n                    <label\n                        htmlFor={\"answer-\"+index}\n                        className=\"hovereffect\">\n                    {choice.childNodes[1].textContent}</label>\n                    <p\n                        className=\"feedback\"\n                        id={\"feedback-\"+index}>\n                    </p>\n                </form>)\n            })\n        )\n    }else{\n        return <></>\n    }\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}