{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\";\nimport React from \"react\";\n/*\n    quesiton and choice should be updated everytime\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"question cf\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instruction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n        state: this.state,\n        props: this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"mc cf\",\n        children: /*#__PURE__*/_jsxDEV(Choices, {\n          state: this.state,\n          props: this.props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst QuestionText = _ref => {\n  let {\n    props,\n    state\n  } = _ref;\n  return props.isFetched && state.isComputed ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"question-number\",\n      children: props.questionNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"question\",\n      children: props.questionTexts[props.questionNum].textContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Still Loading..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n};\n\n_c = QuestionText;\n\nconst Choices = _ref2 => {\n  let {\n    props,\n    state\n  } = _ref2;\n  const choices = props.answers.filter((_, index) => {\n    return props.questionNum * 4 <= index && index <= props.questionNum * 4 + 3;\n  });\n  return choices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"\",\n        id: \"answer-\" + index,\n        value: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"answer-\" + index,\n        className: \"hovereffect\",\n        children: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feedback\",\n        id: \"feedback-\" + index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  });\n};\n\n_c2 = Choices;\nexport default Question;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionText\");\n$RefreshReg$(_c2, \"Choices\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","Question","Component","constructor","props","render","state","QuestionText","isFetched","isComputed","questionNum","questionTexts","textContent","Choices","choices","answers","filter","_","index","map","choice","childNodes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;;;;;AAGA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuC;AAEnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAS,MAAA,SAAS,EAAC,aAAnB;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAE,KAAKC,KAA1B;AAAiC,QAAA,KAAK,EAAE,KAAKF;AAA7C;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA,+BAEA,QAAC,OAAD;AAAS,UAAA,KAAK,EAAE,KAAKE,KAArB;AAA4B,UAAA,KAAK,EAAE,KAAKF;AAAxC;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAOI;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAlBkC;;AAqBvC,MAAMG,YAAY,GAAG,QAAoB;AAAA,MAAnB;AAACH,IAAAA,KAAD;AAAQE,IAAAA;AAAR,GAAmB;AACrC,SAAQF,KAAK,CAACI,SAAN,IAAmBF,KAAK,CAACG,UAA1B,gBACH;AAAA,4BACI;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA,gBAAgCL,KAAK,CAACM;AAAtC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA,gBAAyBN,KAAK,CAACO,aAAN,CAAoBP,KAAK,CAACM,WAA1B,EAAuCE;AAAhE;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADG,gBAKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALL;AAMH,CAPD;;KAAML,Y;;AASN,MAAMM,OAAO,GAAG,SAAoB;AAAA,MAAnB;AAACT,IAAAA,KAAD;AAAQE,IAAAA;AAAR,GAAmB;AAChC,QAAMQ,OAAO,GAAGV,KAAK,CAACW,OAAN,CAAcC,MAAd,CAAsB,CAACC,CAAD,EAAKC,KAAL,KAAe;AACjD,WAASd,KAAK,CAACM,WAAN,GAAkB,CAAlB,IAAuBQ,KAAxB,IAAmCA,KAAK,IAAId,KAAK,CAACM,WAAN,GAAkB,CAAlB,GAAsB,CAA1E;AACH,GAFe,CAAhB;AAIA,SAAOI,OAAO,CAACK,GAAR,CAAa,CAACC,MAAD,EAASF,KAAT,KAAmB;AACnC,wBAAO;AAAA,8BACC;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,IAAI,EAAC,EAFT;AAGI,QAAA,EAAE,EAAE,YAAUA,KAHlB;AAII,QAAA,KAAK,EAAEE,MAAM,CAACC,UAAP,CAAkB,CAAlB,EAAqBT;AAJhC;AAAA;AAAA;AAAA;AAAA,cADD,eAMC;AACI,QAAA,OAAO,EAAE,YAAUM,KADvB;AAEI,QAAA,SAAS,EAAC,aAFd;AAAA,kBAGCE,MAAM,CAACC,UAAP,CAAkB,CAAlB,EAAqBT;AAHtB;AAAA;AAAA;AAAA;AAAA,cAND,eAUC;AACI,QAAA,SAAS,EAAC,UADd;AAEI,QAAA,EAAE,EAAE,cAAYM;AAFpB;AAAA;AAAA;AAAA;AAAA,cAVD;AAAA,oBAAP;AAeC,GAhBE,CAAP;AAkBH,CAvBD;;MAAML,O;AAyBN,eAAeZ,QAAf","sourcesContent":["import React from \"react\"\n\n/*\n    quesiton and choice should be updated everytime\n*/\n\n\nclass Question extends React.Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    render(){\n        return(\n            <section className=\"question cf\">\n                <p className=\"instruction\"></p>\n                <QuestionText state={this.state} props={this.props} />\n                <form className=\"mc cf\">\n                {/* console.log(this.state)*/}\n                <Choices state={this.state} props={this.props}/>\n                </form>\n                <p className=\"messages\"></p>\n            </section>\n        )\n    }\n}\n\nconst QuestionText = ({props, state}) => {\n    return (props.isFetched && state.isComputed) ? (\n        <>\n            <p className=\"question-number\">{props.questionNum}</p>\n            <p className=\"question\">{props.questionTexts[props.questionNum].textContent}</p> {/* THERE IS A PROBLEM AT THIS STAGE*/}\n        </>\n    ) : (<p>Still Loading..</p>)\n}\n\nconst Choices = ({props, state}) => {\n    const choices = props.answers.filter( (_ , index) => {\n        return ((props.questionNum*4 <= index) && (index <= props.questionNum*4 + 3))\n    })\n\n    return(choices.map( (choice, index) => {\n        return(<>\n                <input\n                    type=\"radio\"\n                    name=\"\"\n                    id={\"answer-\"+index}\n                    value={choice.childNodes[1].textContent}/>\n                <label\n                    htmlFor={\"answer-\"+index}\n                    className=\"hovereffect\">\n                {choice.childNodes[1].textContent}</label>\n                <p\n                    className=\"feedback\"\n                    id={\"feedback-\"+index}>\n                </p>\n            </>)\n        })\n    )\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}