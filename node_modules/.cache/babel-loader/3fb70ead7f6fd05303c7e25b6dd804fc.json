{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Question extends React.Component {\n  //if needed to be load => should not be put in constructor??\n  //load initial state => \n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.user, prevProps.user)) {\n      // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n      const Choices = this.props.answers.filter((_, index) => {\n        return this.props.questionNum * 4 <= index && index <= this.props.questionNum * 4 + 3;\n      });\n      console.log(this.props.answers);\n      const ChoiceDisplay = Choices.map((choice, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"\",\n            id: \"answer-\" + index,\n            value: choice.childNodes[1].textContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer-\" + index,\n            className: \"hovereffect\",\n            children: choice.childNodes[1].textContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"feedback\",\n            id: \"feedback-\" + index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true);\n      });\n      this.setState({\n        Choices: Choices,\n        ChoiceDisplay: ChoiceDisplay\n      });\n    }\n  }\n\n  show() {\n    return this.props.isFetched ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-number\",\n        children: this.props.questionNum + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question\",\n        children: this.props.questionTexts[this.props.questionNum].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"mc cf\",\n        children: this.ChoiceDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Still Loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 14\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"question cf\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instruction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), this.show(), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","Question","Component","constructor","props","componentDidUpdate","prevProps","equal","user","Choices","answers","filter","_","index","questionNum","console","log","ChoiceDisplay","map","choice","childNodes","textContent","setState","show","isFetched","questionTexts","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAGA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuC;AAEnC;AACA;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAG,CAACC,KAAK,CAAC,KAAKH,KAAL,CAAWI,IAAZ,EAAkBF,SAAS,CAACE,IAA5B,CAAT,EAA2C;AAAE;AAEzC,YAAMC,OAAO,GAAG,KAAKL,KAAL,CAAWM,OAAX,CAAmBC,MAAnB,CAA2B,CAACC,CAAD,EAAKC,KAAL,KAAe;AACtD,eAAS,KAAKT,KAAL,CAAWU,WAAX,GAAuB,CAAvB,IAA4BD,KAA7B,IAAwCA,KAAK,IAAI,KAAKT,KAAL,CAAWU,WAAX,GAAuB,CAAvB,GAA2B,CAApF;AACH,OAFe,CAAhB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAa,KAAKZ,KAAL,CAAWM,OAAxB;AAEA,YAAMO,aAAa,GAAGR,OAAO,CAACS,GAAR,CAAa,CAACC,MAAD,EAASN,KAAT,KAAmB;AAClD,4BACI;AAAA,kCACI;AACI,YAAA,IAAI,EAAC,OADT;AAEI,YAAA,IAAI,EAAC,EAFT;AAGI,YAAA,EAAE,EAAE,YAAUA,KAHlB;AAII,YAAA,KAAK,EAAEM,MAAM,CAACC,UAAP,CAAkB,CAAlB,EAAqBC;AAJhC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI;AACI,YAAA,OAAO,EAAE,YAAUR,KADvB;AAEI,YAAA,SAAS,EAAC,aAFd;AAAA,sBAGCM,MAAM,CAACC,UAAP,CAAkB,CAAlB,EAAqBC;AAHtB;AAAA;AAAA;AAAA;AAAA,kBANJ,eAUI;AACI,YAAA,SAAS,EAAC,UADd;AAEI,YAAA,EAAE,EAAE,cAAYR;AAFpB;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA,wBADJ;AAiBH,OAlBqB,CAAtB;AAoBA,WAAKS,QAAL,CAAc;AACVb,QAAAA,OAAO,EAAEA,OADC;AAEVQ,QAAAA,aAAa,EAAGA;AAFN,OAAd;AAIH;AACJ;;AAEDM,EAAAA,IAAI,GAAE;AACF,WAAO,KAAKnB,KAAL,CAAWoB,SAAX,gBACH;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC,iBAAb;AAAA,kBAAgC,KAAKpB,KAAL,CAAWU,WAAX,GAAuB;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA,kBAAyB,KAAKV,KAAL,CAAWqB,aAAX,CAAyB,KAAKrB,KAAL,CAAWU,WAApC,EAAiDO;AAA1E;AAAA;AAAA;AAAA;AAAA,cAFJ,oBAGI;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA,kBACK,KAAKJ;AADV;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,oBADG,gBAQF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARL;AASH;;AAEDS,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAS,MAAA,SAAS,EAAC,aAAnB;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK,KAAKH,IAAL,EAFL,eAGI;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAhEkC;;AAmEvC,eAAetB,QAAf","sourcesContent":["import React from \"react\"\n\n\nclass Question extends React.Component {\n\n    //if needed to be load => should not be put in constructor??\n    //load initial state => \n\n    constructor(props){\n        super(props)\n    }\n\n    componentDidUpdate(prevProps) {\n        if(!equal(this.props.user, prevProps.user)){ // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n\n            const Choices = this.props.answers.filter( (_ , index) => {\n                return ((this.props.questionNum*4 <= index) && (index <= this.props.questionNum*4 + 3))\n            })\n            console.log( this.props.answers )\n\n            const ChoiceDisplay = Choices.map( (choice, index) => {\n                return(\n                    <>\n                        <input\n                            type=\"radio\"\n                            name=\"\"\n                            id={\"answer-\"+index}\n                            value={choice.childNodes[1].textContent}/>\n                        <label\n                            htmlFor={\"answer-\"+index}\n                            className=\"hovereffect\">\n                        {choice.childNodes[1].textContent}</label>\n                        <p\n                            className=\"feedback\"\n                            id={\"feedback-\"+index}>\n                        </p>\n                    </>\n                )\n            })\n\n            this.setState({\n                Choices: Choices,\n                ChoiceDisplay : ChoiceDisplay\n            })\n        }\n    }\n\n    show(){\n        return this.props.isFetched ? (\n            <>\n                <p className=\"question-number\">{this.props.questionNum+1}</p>\n                <p className=\"question\">{this.props.questionTexts[this.props.questionNum].textContent}</p> {/* THERE IS A PROBLEM AT THIS STAGE*/}\n                <form className=\"mc cf\">\n                    {this.ChoiceDisplay}\n                </form>\n            </>\n        ) : (<p>Still Loading..</p>)\n    }\n\n    render(){\n        return(\n            <section className=\"question cf\">\n                <p className=\"instruction\"></p>\n                {this.show()}\n                <p className=\"messages\"></p>\n            </section>\n        )\n    }\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}