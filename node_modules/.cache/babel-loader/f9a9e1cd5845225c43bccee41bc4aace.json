{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js\";\nimport logo from './logo.svg';\nimport Header from './Header';\nimport Wrapper from './Wrapper';\nimport Question from './Question';\nimport Footer from './Footer';\nimport React from 'react';\nimport axios from 'axios';\nimport './App.css'; //path must be changed accordingly to the param query input\n\nimport XMLData from './xml/mc.xml'; //import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './css/style.css'\n\n/*\nPROBLEM:\n  WHEN DO WE RESET QUESTION NUM => WHEN THE BUTTON IS PRESSED\n  HOW DO WE SEND DATA FROM CHILD TO PARENTS IN REACT?\n\n  SEND DATA FROM CHILD TO PARENT == SEND A FUNCTION FROM PARENT TO CHILD FOR A CHILD TO RUN AND RETURN \n\n  LOOK FOR FORM.JS in name-job\n\nPROBLEM:\n  SEEM TO BE ASYNCHRONOUS FUNCTION CALLING PROBLEM OCCURING\n  STILL DO NOT KNOW HOW TO SOLVE IT...\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.loadXML();\n    console.log(this.state);\n  }\n\n  loadXML() {\n    axios.get(XMLData, {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      //there is no need to parse this everytime there is a mount,\n      //only need to parse it when the page is loaded\n      console.log(\"mounting APP\");\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questionTexts = Array.from(xml.getElementsByTagName(\"questiontext\"));\n      var answers = Array.from(xml.getElementsByTagName(\"answer\")); //.innerHTML <= should I use innerHTML??\n      //should I change parse xml as a string or as an JSX object?\n      //var answers = xml.getElementsByTagName(\"\")\n      //do we have to set every state again??\n\n      console.log({\n        questionNum: 1,\n        questionTexts: questionTexts,\n        answers: answers\n      });\n      return {\n        questionNum: 1,\n        questionTexts: questionTexts,\n        answers: answers\n      };\n    });\n  }\n\n  getQuestionNum() {\n    if (this.state.questionNum) {\n      return this.state.questionNum;\n    } else {\n      return \"Loading\";\n    }\n  }\n\n  getQuestionTexts() {\n    if (this.state.questionTexts) {\n      return this.state.questionTexts;\n    } else {\n      return \"Loading\";\n    }\n  }\n\n  getAnswers() {\n    if (this.state.answers) {\n      return this.state.answers;\n    } else {\n      return \"Loading\";\n    }\n  }\n\n  render() {\n    //console.log( this.state )\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: this.getQuestionNum(),\n        questionTexts: this.getQuestionTexts,\n        answers: this.getAnswers()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App.js"],"names":["logo","Header","Wrapper","Question","Footer","React","axios","XMLData","App","Component","constructor","props","state","loadXML","console","log","get","then","response","parser","DOMParser","xml","parseFromString","data","questionTexts","Array","from","getElementsByTagName","answers","questionNum","getQuestionNum","getQuestionTexts","getAnswers","render"],"mappings":"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","sourcesContent":["import logo from './logo.svg'\n\nimport Header from './Header'\nimport Wrapper from './Wrapper'\nimport Question from './Question';\nimport Footer from './Footer';\n\nimport React from 'react';\nimport axios from 'axios'\n\nimport './App.css';\n//path must be changed accordingly to the param query input\n\nimport XMLData from './xml/mc.xml'\n//import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n//import './mcstyle.css'\n//import './quiz.css'\n//import './reset.css'\n//import './css/style.css'\n\n/*\nPROBLEM:\n  WHEN DO WE RESET QUESTION NUM => WHEN THE BUTTON IS PRESSED\n  HOW DO WE SEND DATA FROM CHILD TO PARENTS IN REACT?\n\n  SEND DATA FROM CHILD TO PARENT == SEND A FUNCTION FROM PARENT TO CHILD FOR A CHILD TO RUN AND RETURN \n\n  LOOK FOR FORM.JS in name-job\n\nPROBLEM:\n  SEEM TO BE ASYNCHRONOUS FUNCTION CALLING PROBLEM OCCURING\n  STILL DO NOT KNOW HOW TO SOLVE IT...\n*/\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = this.loadXML()\n    console.log( this.state )\n  }\n\n  loadXML(){\n    axios.get(XMLData,\n          {\"Content-Type\":\"application/xml; charset=utf-8\"\n      }).then((response)=>{\n          //there is no need to parse this everytime there is a mount,\n          //only need to parse it when the page is loaded\n          console.log( \"mounting APP\")\n          const parser = new DOMParser()\n          var xml = parser.parseFromString(response.data,\"text/xml\")\n          var questionTexts = Array.from(xml.getElementsByTagName(\"questiontext\"))\n          var answers = Array.from(xml.getElementsByTagName(\"answer\"))\n          \n          //.innerHTML <= should I use innerHTML??\n          //should I change parse xml as a string or as an JSX object?\n          //var answers = xml.getElementsByTagName(\"\")\n\n          //do we have to set every state again??\n          console.log({\n            questionNum: 1,\n            questionTexts: questionTexts,\n            answers: answers\n        })\n\n          return {\n              questionNum: 1,\n              questionTexts: questionTexts,\n              answers: answers\n          }\n      })\n  }\n\n  getQuestionNum(){\n    if(this.state.questionNum){\n      return this.state.questionNum\n    }else{\n      return \"Loading\"\n    }\n  }\n\n  getQuestionTexts(){\n    if(this.state.questionTexts){\n      return this.state.questionTexts\n    }else{\n      return \"Loading\"\n    }\n  }\n\n  getAnswers(){\n    if(this.state.answers){\n      return this.state.answers\n    }else {\n      return \"Loading\"\n    }\n  }\n\n  render(){\n    //console.log( this.state )\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Wrapper/>\n        <Question\n          questionNum={this.getQuestionNum()}\n          questionTexts={this.getQuestionTexts}\n          answers={this.getAnswers()}\n        />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}