{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App copy.js\",\n    _s = $RefreshSig$();\n\nimport Header from './Header';\nimport Instruction from './Instruction';\nimport Question from './Question';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport XMLData from './xml/mc.xml';\nimport './mcstyle.css';\n/*\nNeed Updates:\n  <br /> TAG\n  <br /> Tag parsing has a problem in displaying questions\n\n  <images/ >\n  image tag could not be displayed\n\n  Have to implement Last page after complete all questions\n  //review correct answer => display all correct answer\n\n  Additional features\n    1. Transition from feedback block:none to block:display\n    2. hide feedback (correct/ uncorrect) in chrome dev tools\n    3. (For self entertainment) Save individual's score to database\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [questionsList, setQuestionsList] = useState([]);\n  const [questionNum, setQuestionNum] = useState(-1); //0 to total no. of question-1, 0 is the first question\n\n  const [answersList, setAnswersList] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(-1);\n  const [correct, setCorrect] = useState(null);\n  const [pressSubmit, setPressSubmit] = useState(0); // = 1 when submit button is press, use to show message when press submit but no answer is selected\n\n  const resetSelected = () => {\n    setCorrect(null);\n    setSelectedAnswer(-1);\n    setPressSubmit(0);\n  };\n\n  const goToNextQuestion = () => {\n    setQuestionNum(questionNum + 1);\n    setCorrect(null);\n    setSelectedAnswer(-1);\n    setPressSubmit(0);\n  };\n\n  const goToPrevQuestion = () => {\n    setQuestionNum(questionNum - 1);\n    setCorrect(null);\n    setSelectedAnswer(-1);\n    setPressSubmit(0);\n  };\n\n  const selectAnswer = answer => {\n    setSelectedAnswer(answer);\n    setPressSubmit(0);\n  };\n\n  useEffect(() => {\n    axios.get(XMLData, {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questionsList = Array.from(xml.getElementsByTagName(\"question\")); //shuffle elements in an array\n\n      const shuffle = array => {\n        var currentIndex = array.length,\n            randomIndex; // While there remain elements to shuffle...\n\n        while (currentIndex != 0) {\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--; // And swap it with the current element.\n\n          [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n      };\n\n      var answersList = [];\n\n      for (var i = 0; i < questionsList.length; i++) {\n        var answers = Array.from(questionsList[i].getElementsByTagName(\"answer\"));\n\n        if (questionsList[i].getAttribute(\"randomanswer\").localeCompare(\"true\") == 0) {\n          shuffle(answers);\n        }\n\n        answersList.push(answers);\n      }\n\n      setQuestionsList(questionsList);\n      setAnswersList(answersList);\n    }).catch(e => {\n      console.log(e);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"wrapper\",\n      \"data-role\": \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Instruction, {\n        questionNum: questionNum,\n        goToNextQuestion: this.goToNextQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: questionNum,\n        questionsList: questionsList,\n        choices: answersList[questionNum],\n        totalQuestions: answersList.length,\n        selectedAnswer: selectedAnswer,\n        correct: correct,\n        pressSubmit: pressSubmit,\n        goToNextQuestion: this.goToNextQuestion,\n        goToPrevQuestion: this.goToPrevQuestion,\n        selectAnswer: this.selectAnswer,\n        setCorrect: this.setCorrect,\n        setPressSubmit: this.setPressSubmit,\n        resetSelected: this.resetSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"7XBgDpyc5wE3Ejim053e6eV9xdA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/App copy.js"],"names":["Header","Instruction","Question","React","useEffect","useState","axios","XMLData","App","questionsList","setQuestionsList","questionNum","setQuestionNum","answersList","setAnswersList","selectedAnswer","setSelectedAnswer","correct","setCorrect","pressSubmit","setPressSubmit","resetSelected","goToNextQuestion","goToPrevQuestion","selectAnswer","answer","get","then","response","parser","DOMParser","xml","parseFromString","data","Array","from","getElementsByTagName","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","i","answers","getAttribute","localeCompare","push","catch","e","console","log"],"mappings":"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","sourcesContent":["import Header from './Header'\nimport Instruction from './Instruction'\nimport Question from './Question'\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport XMLData from './xml/mc.xml'\nimport './mcstyle.css'\n\n/*\nNeed Updates:\n  <br /> TAG\n  <br /> Tag parsing has a problem in displaying questions\n\n  <images/ >\n  image tag could not be displayed\n\n  Have to implement Last page after complete all questions\n  //review correct answer => display all correct answer\n\n  Additional features\n    1. Transition from feedback block:none to block:display\n    2. hide feedback (correct/ uncorrect) in chrome dev tools\n    3. (For self entertainment) Save individual's score to database\n*/\n\nconst App = () => {\n\n  const [questionsList, setQuestionsList] = useState([])\n  const [questionNum, setQuestionNum] = useState(-1) //0 to total no. of question-1, 0 is the first question\n  const [answersList, setAnswersList] = useState([])\n  const [selectedAnswer, setSelectedAnswer] = useState(-1)\n  const [correct, setCorrect] = useState(null)\n  const [pressSubmit, setPressSubmit] = useState(0) // = 1 when submit button is press, use to show message when press submit but no answer is selected\n\n  const resetSelected = () => {\n    setCorrect(null)\n    setSelectedAnswer(-1)\n    setPressSubmit(0)\n  }\n\n  const goToNextQuestion = () => {\n    setQuestionNum(questionNum + 1)\n    setCorrect(null)\n    setSelectedAnswer(-1)\n    setPressSubmit(0)\n  }\n\n  const goToPrevQuestion = () => {\n    setQuestionNum(questionNum - 1)\n    setCorrect(null)\n    setSelectedAnswer(-1)\n    setPressSubmit(0)\n  }\n\n  const selectAnswer = (answer) => {\n    setSelectedAnswer(answer)\n    setPressSubmit(0)\n  }\n\n  useEffect(() => {\n    axios.get(XMLData, { \"Content-Type\": \"application/xml; charset=utf-8\" }).then((response) => {\n      const parser = new DOMParser()\n      var xml = parser.parseFromString(response.data,\"text/xml\")\n      var questionsList = Array.from(xml.getElementsByTagName(\"question\"))\n      //shuffle elements in an array\n      const shuffle = (array) => {\n        var currentIndex = array.length, randomIndex;\n        // While there remain elements to shuffle...\n        while (currentIndex != 0) {\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n          // And swap it with the current element.\n          [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n        }\n        return array;\n      }\n      var answersList = []\n      for (var i = 0; i < questionsList.length; i++) {\n        var answers = Array.from(questionsList[i].getElementsByTagName(\"answer\"))\n        if (questionsList[i].getAttribute(\"randomanswer\").localeCompare(\"true\") == 0) {\n          shuffle(answers)\n        }\n        answersList.push(answers)\n      }\n      setQuestionsList(questionsList)\n      setAnswersList(answersList)\n    }).catch(e => { console.log(e) })\n  })\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div id=\"wrapper\" data-role=\"content\">\n        <Instruction\n          questionNum={questionNum}\n          goToNextQuestion={this.goToNextQuestion} />\n        <Question\n          questionNum={questionNum}\n          questionsList={questionsList}\n          choices={answersList[questionNum]}\n          totalQuestions={answersList.length}\n          selectedAnswer={selectedAnswer}\n          correct={correct}\n          pressSubmit={pressSubmit}\n\n          goToNextQuestion={this.goToNextQuestion}\n          goToPrevQuestion={this.goToPrevQuestion}\n          selectAnswer={this.selectAnswer}\n          setCorrect={this.setCorrect}\n          setPressSubmit={this.setPressSubmit}\n          resetSelected={this.resetSelected}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}