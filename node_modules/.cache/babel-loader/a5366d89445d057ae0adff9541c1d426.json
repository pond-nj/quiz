{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Question extends React.Component {\n  //if needed to be load => should not be put in constructor??\n  //load initial state => \n  constructor(props) {\n    super(props);\n    this.state = {\n      Choices: [],\n      ChoiceDisplay: [],\n      isComputed: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isFetched != prevProps.isFetched) {\n      // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n      const Choices = this.props.answers.filter((_, index) => {\n        return this.props.questionNum * 4 <= index && index <= this.props.questionNum * 4 + 3;\n      }); //console.log( this.props.answers )\n\n      const ChoiceDisplay = Choices.map((choice, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"\",\n            id: \"answer-\" + index,\n            value: choice.childNodes[1].textContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer-\" + index,\n            className: \"hovereffect\",\n            children: choice.childNodes[1].textContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"feedback\",\n            id: \"feedback-\" + index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true);\n      });\n      this.setState({\n        Choices: Choices,\n        ChoiceDisplay: ChoiceDisplay,\n        isComputed: true\n      }); //console.log( \"new state set!\" )\n    }\n  }\n\n  show() {\n    console.log(this.props);\n    console.log(this.state);\n    return this.props.isFetched && this.state.isComputed ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-number\",\n        children: this.props.questionNum + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question\",\n        children: this.props.questionTexts[this.props.questionNum].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"mc cf\",\n        children: console.log(this.state)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Still Loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 14\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"question cf\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instruction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), this.show(), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","Question","Component","constructor","props","state","Choices","ChoiceDisplay","isComputed","componentDidUpdate","prevProps","isFetched","answers","filter","_","index","questionNum","map","choice","childNodes","textContent","setState","show","console","log","questionTexts","render"],"mappings":"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","sourcesContent":["import React from \"react\"\n\n\nclass Question extends React.Component {\n\n    //if needed to be load => should not be put in constructor??\n    //load initial state => \n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            Choices: [],\n            ChoiceDisplay : [],\n            isComputed: false\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if( this.props.isFetched != prevProps.isFetched) { // Check if it's a new user, you can also use some unique property, like the ID  (this.props.user.id !== prevProps.user.id)\n\n            const Choices = this.props.answers.filter( (_ , index) => {\n                return ((this.props.questionNum*4 <= index) && (index <= this.props.questionNum*4 + 3))\n            })\n            //console.log( this.props.answers )\n\n            const ChoiceDisplay = Choices.map( (choice, index) => {\n                return(\n                    <>\n                        <input\n                            type=\"radio\"\n                            name=\"\"\n                            id={\"answer-\"+index}\n                            value={choice.childNodes[1].textContent}/>\n                        <label\n                            htmlFor={\"answer-\"+index}\n                            className=\"hovereffect\">\n                        {choice.childNodes[1].textContent}</label>\n                        <p\n                            className=\"feedback\"\n                            id={\"feedback-\"+index}>\n                        </p>\n                    </>\n                )\n            })\n\n            this.setState({\n                Choices: Choices,\n                ChoiceDisplay : ChoiceDisplay,\n                isComputed: true\n            })\n\n            //console.log( \"new state set!\" )\n        }\n    }\n\n    show(){\n        console.log( this.props )\n        console.log( this.state )\n        return (this.props.isFetched && this.state.isComputed) ? (\n            <>\n                <p className=\"question-number\">{this.props.questionNum+1}</p>\n                <p className=\"question\">{this.props.questionTexts[this.props.questionNum].textContent}</p> {/* THERE IS A PROBLEM AT THIS STAGE*/}\n                <form className=\"mc cf\">\n                    {console.log(this.state)}\n                    {/*this.state.ChoiceDisplay*/}\n                </form>\n            </>\n        ) : (<p>Still Loading..</p>)\n    }\n\n    render(){\n        return(\n            <section className=\"question cf\">\n                <p className=\"instruction\"></p>\n                {/*console.log( this.state )*/}\n                {this.show()}\n                <p className=\"messages\"></p>\n            </section>\n        )\n    }\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}