{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\";\nimport React, { useState } from \"react\";\nimport Buttons from \"./Buttons\"; //contain question text\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionText = _ref => {\n  let {\n    props\n  } = _ref;\n\n  const parseBreakLine = text => {\n    console.log(text);\n    var br = \"<br/ >\"; // console.log(text.split(regex))\n\n    const textArr = text.split(br);\n    return textArr.map((line, index) => {\n      if (index != textArr.length - 1) return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\" \", line, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, \"key_\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 64\n        }, this), \" \"]\n      }, void 0, true);else return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: line\n      }, void 0, false);\n    });\n  };\n\n  const parseImage = () => {\n    props.questionsList[props.questionNum].getElementsByTagName(\"questiontext\")[0].getElementsByTagName(\"image\")[0].textContent;\n  };\n\n  console.log(parseBreakLine(props.questionsList[props.questionNum].childNodes[1].textContent));\n  console.log(\"h\");\n  console.log(parseImage(props.questionsList[props.questionNum].childNodes[1].textContent));\n\n  if (props.questionNum != -1) {\n    //-1 is start menu\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-number\",\n        children: [\"Question \", props.questionNum + 1, \" out of \", props.totalQuestions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question\",\n        children: parseBreakLine(props.questionsList[props.questionNum].childNodes[1].textContent)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), props.questionsList[props.questionNum].getElementsByTagName(\"questiontext\")[0].getElementsByTagName(\"image\").length == 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 139\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}; //display choices\n\n\n_c = QuestionText;\n\nconst ChoiceList = _ref2 => {\n  let {\n    props\n  } = _ref2;\n  // console.log( props.choices )\n  const ChoicesJSX = props.choices.map((choice, index) => {\n    // console.log(props.selectedAnswer)\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui-radio\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"answer-\" + index,\n          className: \"hovereffect ui-btn ui-corner-all ui-btn-inherit ui-btn-icon-left \" + (index == props.selectedAnswer ? \"ui-radio-on\" : \"ui-radio-off\"),\n          children: choice.childNodes[1].textContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"answer-\" + props.questionNum,\n          index: index,\n          id: \"answer-\" + index,\n          value: choice.childNodes[1].textContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feedback\",\n        id: \"feedback-\" + index,\n        style: {\n          display: props.selectedAnswer == index && props.correct != null ? \"block\" : \"none\"\n        },\n        children: choice.childNodes[3].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mc cf\",\n    onChange: event => {\n      props.setCorrect(null);\n      props.setSelectedAnswer(event.target.getAttribute(\"index\"));\n    },\n    onClick: event => {\n      props.setCorrect(null);\n      props.setSelectedAnswer(event.target.getAttribute(\"index\"));\n    },\n    children: ChoicesJSX\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = ChoiceList;\n\nconst Messages = _ref3 => {\n  let {\n    props\n  } = _ref3;\n  // console.log(props.selectedAnswer)\n  const Message = props.pressSubmit == 1 && props.selectedAnswer == -1 ? \"Please answer the above question.\" : \"\";\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"messages\",\n    children: Message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 13\n  }, this);\n};\n\n_c3 = Messages;\n\nconst Question = props => {\n  //console.log( props )\n  // console.log( props.questionNum )\n  if (props.questionNum != -1) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"question cf\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"instruction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ChoiceList, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Messages, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Buttons\n      /* we don't have to assign every props again \n      like using props={...props, new element}\n      I have tried and it did not work\n      seem there is some syntax bug*/\n      , {\n        goToNextQuestion: props.goToNextQuestion,\n        goToPrevQuestion: props.goToPrevQuestion,\n        correctAnswer: props.choices.map((choice, _) => {\n          return choice.getAttribute(\"fraction\") == 1;\n        }).indexOf(true),\n        setCorrect: props.setCorrect,\n        selectedAnswer: props.selectedAnswer,\n        correct: props.correct,\n        setSubmit: props.setSubmit,\n        pressSubmit: props.pressSubmit,\n        resetSelected: props.resetSelected,\n        questionsList: props.questionsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c4 = Question;\nexport default Question;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"QuestionText\");\n$RefreshReg$(_c2, \"ChoiceList\");\n$RefreshReg$(_c3, \"Messages\");\n$RefreshReg$(_c4, \"Question\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","useState","Buttons","QuestionText","props","parseBreakLine","text","console","log","br","textArr","split","map","line","index","length","parseImage","questionsList","questionNum","getElementsByTagName","textContent","childNodes","totalQuestions","ChoiceList","ChoicesJSX","choices","choice","selectedAnswer","display","correct","event","setCorrect","setSelectedAnswer","target","getAttribute","Messages","Message","pressSubmit","Question","goToNextQuestion","goToPrevQuestion","_","indexOf","setSubmit","resetSelected"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Buttons from \"./Buttons\"\n\n//contain question text\nconst QuestionText = ({props}) => {\n    const parseBreakLine = (text) => {\n        console.log(text)\n        var br = \"<br/ >\";\n        // console.log(text.split(regex))\n        const textArr = text.split(br)\n        return textArr.map((line, index) => {\n            if( index != textArr.length-1 ) return  (<> {line} <br key={\"key_\" + index} /> </>)\n            else return (<>{line}</>)\n        })\n    }\n\n    const parseImage = () => {\n        props.questionsList[props.questionNum].getElementsByTagName(\"questiontext\")[0].getElementsByTagName(\"image\")[0].textContent\n        \n    }\n\n    console.log(parseBreakLine(props.questionsList[props.questionNum].childNodes[1].textContent))\n    console.log(\"h\")\n    console.log(parseImage(props.questionsList[props.questionNum].childNodes[1].textContent))\n    if( props.questionNum != -1 ){ //-1 is start menu\n        return (<>\n            <p className=\"question-number\">Question {props.questionNum + 1} out of {props.totalQuestions}</p>\n            {/* {console.log(props.questionsList[props.questionNum].childNodes[1])} */}\n            <p className=\"question\">{parseBreakLine(props.questionsList[props.questionNum].childNodes[1].textContent)}</p>\n            {(props.questionsList[props.questionNum].getElementsByTagName(\"questiontext\")[0].getElementsByTagName(\"image\").length == 1) ? <img src=\"\"/> : <></> }\n        </>)\n\n    } else { return <></> }\n}\n\n//display choices\nconst ChoiceList = ({props}) => {\n    // console.log( props.choices )\n\n    const ChoicesJSX = props.choices.map( (choice, index) => {\n        // console.log(props.selectedAnswer)\n        return(\n            <>\n                <div className=\"ui-radio\">\n                <label\n                    htmlFor={\"answer-\"+index}\n                    className={\"hovereffect ui-btn ui-corner-all ui-btn-inherit ui-btn-icon-left \"+((index==props.selectedAnswer)? \"ui-radio-on\":\"ui-radio-off\")}>\n                {choice.childNodes[1].textContent}\n                </label>\n                <input\n                    type=\"radio\"\n                    name={\"answer-\"+props.questionNum}\n                    index={index}\n                    id={\"answer-\"+index}\n                    value={choice.childNodes[1].textContent}/>\n                </div>\n                <p\n                    className=\"feedback\"\n                    id={\"feedback-\"+index}\n                    style={{display: ( (props.selectedAnswer == index) && (props.correct != null )) ? \"block\" : \"none\"}}>\n                {choice.childNodes[3].textContent}\n                </p>\n            </>)\n    })\n\n    return(\n        <form className=\"mc cf\" onChange={(event) => {\n            props.setCorrect(null)\n            props.setSelectedAnswer(event.target.getAttribute(\"index\"))}\n            }\n\n            onClick={(event) => {\n                props.setCorrect(null)\n                props.setSelectedAnswer(event.target.getAttribute(\"index\"))}\n            }\n            >\n        {ChoicesJSX}\n        </form>\n    )\n}\n\nconst Messages = ({props}) => {\n    // console.log(props.selectedAnswer)\n    const Message = (props.pressSubmit == 1 && props.selectedAnswer == -1)? \"Please answer the above question.\" : \"\"\n\n    return (<p className=\"messages\">{Message}</p>)\n}\n\nconst Question = (props) => {\n    //console.log( props )\n    // console.log( props.questionNum )\n    if( props.questionNum != - 1){\n        return(<>\n            <section className=\"question cf\">\n                <p className=\"instruction\"></p>\n                <QuestionText props={props} />\n                <ChoiceList props={props}/>\n                <Messages props = {props}/>\n            </section>\n\n            <Buttons\n\n                /* we don't have to assign every props again \n                like using props={...props, new element}\n                I have tried and it did not work\n                seem there is some syntax bug*/\n                goToNextQuestion={props.goToNextQuestion}\n                goToPrevQuestion={props.goToPrevQuestion}\n                correctAnswer={props.choices.map( ( choice, _ ) => {\n                    return( choice.getAttribute(\"fraction\") == 1 )\n                }).indexOf(true)}\n                setCorrect={props.setCorrect}\n                selectedAnswer={props.selectedAnswer}\n                correct={props.correct}\n                setSubmit={props.setSubmit}\n                pressSubmit={props.pressSubmit}\n                resetSelected={props.resetSelected}\n                questionsList={props.questionsList}\n            />\n        </>)\n    }else { return(<></>)}\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}