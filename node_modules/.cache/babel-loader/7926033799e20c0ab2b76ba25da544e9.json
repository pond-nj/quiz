{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js\";\nimport React, { useState } from \"react\";\nimport Buttons from \"./Buttons\"; //contain question text\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionText = _ref => {\n  let {\n    props\n  } = _ref;\n\n  if (props.questionNum != -1) {//-1 is start menu\n\n    /*\n    return (props.isFetched) ? (\n        <>\n            <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n            <p className=\"question\">{props.questionTexts[props.questionNum].textContent}</p>\n        </>\n    ) : (<p>Still Loading..</p>)  */\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}; //display choices\n\n\n_c = QuestionText;\n\nconst ChoiceList = _ref2 => {\n  let {\n    props\n  } = _ref2;\n  console.log(props);\n  const ChoicesJSX = props.choices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"answer-\" + props.questionNum,\n        id: \"answer-\" + index,\n        value: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"answer-\" + index,\n        className: \"hovereffect\",\n        children: choice.childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feedback\",\n        id: \"feedback-\" + index,\n        style: {\n          display: \"none\"\n        },\n        children: choice.childNodes[3].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mc cf\",\n    onChange: event => {\n      props.setSelectedAnswer(event.target.id);\n    },\n    children: ChoicesJSX\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = ChoiceList;\n\nconst Choices = _ref3 => {\n  let {\n    props\n  } = _ref3;\n\n  //console.log(props)\n  if (props.questionNum != -1) {\n    //-1 is start menu\n    return /*#__PURE__*/_jsxDEV(ChoiceList, {\n      props: props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c3 = Choices;\n\nconst Question = props => {\n  //console.log( props )\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"question cf\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instruction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n        props: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Choices, {\n        props: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      goToNextQuestion: props.goToNextQuestion,\n      goToPrevQuestion: props.goToPrevQuestion,\n      correctAnswer: \"answer-\" + props.choices.map((choice, index) => {\n        return choice.getAttribute(\"fraction\") == 1;\n      }).indexOf(true),\n      setCorrect: props.setCorrect,\n      selectedAnswer: props.selectedAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_c4 = Question;\nexport default Question;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"QuestionText\");\n$RefreshReg$(_c2, \"ChoiceList\");\n$RefreshReg$(_c3, \"Choices\");\n$RefreshReg$(_c4, \"Question\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/quiz/src/Question.js"],"names":["React","useState","Buttons","QuestionText","props","questionNum","ChoiceList","console","log","ChoicesJSX","choices","map","choice","index","childNodes","textContent","display","event","setSelectedAnswer","target","id","Choices","Question","goToNextQuestion","goToPrevQuestion","getAttribute","indexOf","setCorrect","selectedAnswer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Buttons from \"./Buttons\"\n\n//contain question text\nconst QuestionText = ({props}) => {\n    if( props.questionNum != -1 ){ //-1 is start menu\n\n        \n        /*\n        return (props.isFetched) ? (\n            <>\n                <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n                <p className=\"question\">{props.questionTexts[props.questionNum].textContent}</p>\n            </>\n        ) : (<p>Still Loading..</p>)  */\n    } else { return <></> }\n}\n\n\n//display choices\nconst ChoiceList = ({props}) => {\n    console.log(props)\n\n    const ChoicesJSX = props.choices.map( (choice, index) => {\n        return(\n            <>\n                <input\n                    type=\"radio\"\n                    name={\"answer-\"+props.questionNum}\n                    id={\"answer-\"+index}\n                    value={choice.childNodes[1].textContent}/>\n                <label\n                    htmlFor={\"answer-\"+index}\n                    className=\"hovereffect\">\n                {choice.childNodes[1].textContent}</label>\n                <p\n                    className=\"feedback\"\n                    id={\"feedback-\"+index}\n                    style={{display:\"none\"}}>\n                {/* HOW TO CHANGE STYLE FROM NONE TO BLOCK */}\n                {choice.childNodes[3].textContent}\n                </p>\n            </>)\n    })\n\n    return(\n        <form className=\"mc cf\" onChange={(event) => {\n            props.setSelectedAnswer(event.target.id)}\n            }>\n        {ChoicesJSX}\n        </form>\n    )\n}\n\nconst Choices = ({props}) => {\n    //console.log(props)\n\n    if( props.questionNum != -1 ){ //-1 is start menu\n        return(\n            <ChoiceList props={props}/>\n            )\n    }else return <></> \n}\n\nconst Question = (props) => {\n    //console.log( props )\n    \n    return(<>\n        <section className=\"question cf\">\n            <p className=\"instruction\"></p>\n            <QuestionText props={props} />\n            <Choices props={props}/>\n            <p className=\"messages\"></p>\n        </section>\n\n        <Buttons\n            goToNextQuestion={props.goToNextQuestion}\n            goToPrevQuestion={props.goToPrevQuestion}\n            correctAnswer={\"answer-\"+props.choices.map( ( choice, index ) => {\n                return( choice.getAttribute(\"fraction\") == 1 )\n            }).indexOf(true)}\n            setCorrect={props.setCorrect}\n            selectedAnswer={props.selectedAnswer}\n          />\n    </>)\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}